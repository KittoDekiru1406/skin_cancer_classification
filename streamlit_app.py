"""
Streamlit Frontend cho h·ªá th·ªëng ch·∫©n ƒëo√°n b·ªánh ngo√†i da
"""

import streamlit as st
import requests
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import io
import json
import time
from typing import Dict, Any

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="üè• Skin Cancer Classification System",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL c·ªßa FastAPI backend
API_BASE_URL = "http://localhost:8001"

# Custom CSS ƒë·ªÉ l√†m ƒë·∫πp giao di·ªán
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .disease-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid;
        margin: 0.5rem 0;
    }
    
    .benign { border-left-color: #28a745; }
    .malignant { border-left-color: #dc3545; }
    .precancer { border-left-color: #ffc107; }
    .cancer { border-left-color: #fd7e14; }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    .stProgress .st-bo {
        background-color: #e9ecef;
    }
    
    .upload-box {
        border: 2px dashed #cccccc;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background-color: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

def display_header():
    """Hi·ªÉn th·ªã header c·ªßa ·ª©ng d·ª•ng"""
    st.markdown("""
    <div class="main-header">
        <h1>üè• H·ªá Th·ªëng Ch·∫©n ƒêo√°n B·ªánh Ngo√†i Da</h1>
        <h3>S·ª≠ d·ª•ng M·∫°ng N∆°-ron T√≠ch Ch·∫≠p (CNN)</h3>
        <p>Ph√¢n lo·∫°i 7 lo·∫°i b·ªánh da ph·ªï bi·∫øn v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

def check_api_health():
    """Ki·ªÉm tra tr·∫°ng th√°i API"""
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        if response.status_code == 200:
            return True, response.json()
        return False, None
    except:
        return False, None

def get_available_models():
    """L·∫•y danh s√°ch models c√≥ s·∫µn"""
    try:
        response = requests.get(f"{API_BASE_URL}/models", timeout=5)
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def get_disease_info():
    """L·∫•y th√¥ng tin v·ªÅ c√°c lo·∫°i b·ªánh"""
    try:
        response = requests.get(f"{API_BASE_URL}/disease-info", timeout=5)
        if response.status_code == 200:
            return response.json()["disease_info"]
        return None
    except:
        return None

def predict_image(image_file, model_name=None):
    """G·ª≠i ·∫£nh ƒë·ªÉ d·ª± ƒëo√°n"""
    try:
        files = {"file": image_file}
        
        if model_name:
            url = f"{API_BASE_URL}/predict/{model_name}"
        else:
            url = f"{API_BASE_URL}/predict/all"
        
        response = requests.post(url, files=files, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"L·ªói API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi: {str(e)}")
        return None

def display_disease_info(disease_info):
    """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c lo·∫°i b·ªánh"""
    st.subheader("üìã Th√¥ng Tin C√°c Lo·∫°i B·ªánh")
    
    # T·∫°o c√°c columns ƒë·ªÉ hi·ªÉn th·ªã
    for disease_code, info in disease_info.items():
        risk_class = "benign"
        if info["type"] == "√Åc t√≠nh":
            risk_class = "malignant"
        elif info["type"] == "Ti·ªÅn ung th∆∞":
            risk_class = "precancer"
        elif info["type"] == "Ung th∆∞":
            risk_class = "cancer"
        
        st.markdown(f"""
        <div class="disease-card {risk_class}">
            <h4>{disease_code.upper()} - {info['name']}</h4>
            <p><strong>Lo·∫°i:</strong> {info['type']} | <strong>Nguy c∆°:</strong> {info['risk']}</p>
            <p>{info['description']}</p>
        </div>
        """, unsafe_allow_html=True)

def display_prediction_results(results, image):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n"""
    
    if "individual_results" in results:
        # K·∫øt qu·∫£ t·ª´ t·∫•t c·∫£ models
        st.subheader("üîç K·∫øt Qu·∫£ D·ª± ƒêo√°n T·ª´ T·∫•t C·∫£ Models")
        
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ upload
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", width=300)
        
        # Consensus prediction
        if results.get("consensus_prediction"):
            consensus = results["consensus_prediction"]
            consensus_info = results.get("consensus_info", {})
            
            st.success(f"üéØ **K·∫øt Qu·∫£ Chung:** {consensus.upper()} - {consensus_info.get('name', '')}")
            
            if consensus_info:
                risk_color = consensus_info.get('color', '#000000')
                st.markdown(f"""
                <div style="background-color: {risk_color}; color: white; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                    <h4>{consensus_info['name']}</h4>
                    <p><strong>Lo·∫°i:</strong> {consensus_info['type']}</p>
                    <p><strong>M·ª©c ƒë·ªô nguy c∆°:</strong> {consensus_info['risk']}</p>
                    <p>{consensus_info['description']}</p>
                </div>
                """, unsafe_allow_html=True)
        
        # K·∫øt qu·∫£ chi ti·∫øt t·ª´ng model
        st.subheader("üìä K·∫øt Qu·∫£ Chi Ti·∫øt T·ª´ng Model")
        
        # T·∫°o b·∫£ng so s√°nh
        comparison_data = []
        for model_name, result in results["individual_results"].items():
            if "predicted_class" in result:
                comparison_data.append({
                    "Model": model_name.replace('_', ' ').title(),
                    "Prediction": result["predicted_class"].upper(),
                    "Confidence": f"{result['confidence']:.2%}",
                    "Disease": result["disease_info"]["name"]
                })
        
        if comparison_data:
            df_comparison = pd.DataFrame(comparison_data)
            st.dataframe(df_comparison, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì so s√°nh confidence
        fig_comparison = go.Figure()
        
        for model_name, result in results["individual_results"].items():
            if "predicted_class" in result:
                fig_comparison.add_trace(go.Bar(
                    name=model_name.replace('_', ' ').title(),
                    x=[result["predicted_class"].upper()],
                    y=[result["confidence"]],
                    text=[f"{result['confidence']:.2%}"],
                    textposition='auto'
                ))
        
        fig_comparison.update_layout(
            title="So S√°nh ƒê·ªô Tin C·∫≠y Gi·ªØa C√°c Models",
            xaxis_title="Prediction",
            yaxis_title="Confidence",
            barmode='group'
        )
        st.plotly_chart(fig_comparison, use_container_width=True)
        
        # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng model
        st.subheader("üî¨ Chi Ti·∫øt T·ª´ng Model")
        
        tabs = st.tabs([model.replace('_', ' ').title() for model in results["individual_results"].keys()])
        
        for i, (model_name, result) in enumerate(results["individual_results"].items()):
            with tabs[i]:
                if "predicted_class" in result:
                    display_single_prediction(result, model_name)
                else:
                    st.error(f"L·ªói v·ªõi model {model_name}: {result.get('error', 'Unknown error')}")
    
    else:
        # K·∫øt qu·∫£ t·ª´ m·ªôt model
        st.subheader("üîç K·∫øt Qu·∫£ D·ª± ƒêo√°n")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", width=300)
        
        with col2:
            display_single_prediction(results["result"], results["model_used"])

def display_single_prediction(result, model_name):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n t·ª´ m·ªôt model"""
    
    predicted_class = result["predicted_class"]
    confidence = result["confidence"]
    disease_info = result["disease_info"]
    all_predictions = result["all_predictions"]
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ch√≠nh
    st.metric(
        label="D·ª± ƒëo√°n",
        value=f"{predicted_class.upper()} - {disease_info['name']}",
        delta=f"Confidence: {confidence:.2%}"
    )
    
    # Th√¥ng tin b·ªánh
    risk_color = disease_info.get('color', '#000000')
    st.markdown(f"""
    <div style="background-color: {risk_color}; color: white; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
        <h4>{disease_info['name']}</h4>
        <p><strong>Lo·∫°i:</strong> {disease_info['type']}</p>
        <p><strong>M·ª©c ƒë·ªô nguy c∆°:</strong> {disease_info['risk']}</p>
        <p>{disease_info['description']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Bi·ªÉu ƒë·ªì x√°c su·∫•t t·∫•t c·∫£ classes
    st.subheader(f"üìà X√°c Su·∫•t T·∫•t C·∫£ Lo·∫°i B·ªánh ({model_name.replace('_', ' ').title()})")
    
    # S·∫Øp x·∫øp theo x√°c su·∫•t
    sorted_predictions = sorted(all_predictions.items(), key=lambda x: x[1], reverse=True)
    
    classes = [item[0].upper() for item in sorted_predictions]
    probabilities = [item[1] for item in sorted_predictions]
    
    fig = px.bar(
        x=probabilities,
        y=classes,
        orientation='h',
        title=f"X√°c Su·∫•t D·ª± ƒêo√°n - {model_name.replace('_', ' ').title()}",
        labels={'x': 'X√°c su·∫•t', 'y': 'Lo·∫°i b·ªánh'},
        color=probabilities,
        color_continuous_scale='viridis'
    )
    
    fig.update_traces(text=[f"{p:.2%}" for p in probabilities], textposition='inside')
    fig.update_layout(height=400)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # B·∫£ng chi ti·∫øt
    df_detailed = pd.DataFrame(sorted_predictions, columns=['Disease Code', 'Probability'])
    df_detailed['Probability'] = df_detailed['Probability'].apply(lambda x: f"{x:.4f}")
    df_detailed['Percentage'] = [f"{p:.2%}" for p in [item[1] for item in sorted_predictions]]
    
    st.dataframe(df_detailed, use_container_width=True)

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    # Header
    display_header()
    
    # Ki·ªÉm tra k·∫øt n·ªëi API
    api_healthy, api_info = check_api_health()
    
    if not api_healthy:
        st.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi backend API. Vui l√≤ng kh·ªüi ƒë·ªông server tr∆∞·ªõc!")
        st.info("Ch·∫°y l·ªánh: `./run_system.sh` ho·∫∑c `uvicorn app:app --host 0.0.0.0 --port 8001` ƒë·ªÉ kh·ªüi ƒë·ªông server")
        return
    
    st.success("‚úÖ K·∫øt n·ªëi API th√†nh c√¥ng!")
    
    # Sidebar
    with st.sidebar:
        st.header("üéõÔ∏è C·∫•u H√¨nh")
        
        # L·∫•y th√¥ng tin models
        models_info = get_available_models()
        if models_info:
            available_models = list(models_info["available_models"].keys())
            st.success(f"ü§ñ {models_info['total_models']} models ƒë√£ s·∫µn s√†ng")
            
            # Models n√†y l√† real models, kh√¥ng ph·∫£i mock
            
            # T√πy ch·ªçn model  
            model_display_names = []
            for model in available_models:
                if model == 'mobilenet':
                    model_display_names.append('MobileNet')
                elif model == 'resnet50':
                    model_display_names.append('ResNet50')
                elif model == 'self_build':
                    model_display_names.append('Self Build')
                else:
                    model_display_names.append(model.replace('_', ' ').title())
            
            model_choice = st.selectbox(
                "Ch·ªçn Model:",
                ["T·∫•t c·∫£ models"] + model_display_names
            )
            
            if model_choice != "T·∫•t c·∫£ models":
                # Chuy·ªÉn ƒë·ªïi t√™n model v·ªÅ format g·ªëc
                model_mapping = {
                    'MobileNet': 'mobilenet',
                    'ResNet50': 'resnet50', 
                    'Self Build': 'self_build'
                }
                selected_model = model_mapping.get(model_choice, model_choice.lower().replace(' ', '_'))
            else:
                selected_model = None
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i th√¥ng tin models")
            return
        
        st.divider()
        
        # Th√¥ng tin ·ª©ng d·ª•ng
        st.header("‚ÑπÔ∏è Th√¥ng Tin")
        st.markdown("""
        **H·ªá th·ªëng ch·∫©n ƒëo√°n b·ªánh ngo√†i da**
        
        - üéØ **Models**: MobileNet, ResNet50, Self-build CNN
        - üè∑Ô∏è **Classes**: 7 lo·∫°i b·ªánh da
        - üìä **Accuracy**: Cao ƒë·ªô ch√≠nh x√°c
        - ‚ö° **Speed**: D·ª± ƒëo√°n nhanh ch√≥ng
        """)
        
        st.divider()
        
        # Warning
        st.warning("""
        ‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:**
        
        H·ªá th·ªëng n√†y ch·ªâ ph·ª•c v·ª• m·ª•c ƒë√≠ch nghi√™n c·ª©u v√† h·ªçc t·∫≠p. 
        
        **KH√îNG thay th·∫ø** vi·ªác ch·∫©n ƒëo√°n y t·∫ø chuy√™n nghi·ªáp!
        """)
    
    # Main content
    tab1, tab2, tab3 = st.tabs(["üîç Ch·∫©n ƒêo√°n", "üìã Th√¥ng Tin B·ªánh", "üìä Demo Dataset"])
    
    with tab1:
        st.header("üì§ T·∫£i L√™n ·∫¢nh ƒê·ªÉ Ch·∫©n ƒêo√°n")
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh da ƒë·ªÉ ch·∫©n ƒëo√°n",
            type=['png', 'jpg', 'jpeg'],
            help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: PNG, JPG, JPEG"
        )
        
        if uploaded_file is not None:
            try:
                # Validate image
                image = Image.open(uploaded_file)
                
                # Check image properties
                if image.size[0] < 50 or image.size[1] < 50:
                    st.warning("‚ö†Ô∏è ·∫¢nh qu√° nh·ªè. Khuy·∫øn ngh·ªã ·∫£nh c√≥ k√≠ch th∆∞·ªõc √≠t nh·∫•t 224x224 pixels.")
                
                # Display image info
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.image(image, caption=f"·∫¢nh ƒë√£ t·∫£i l√™n | K√≠ch th∆∞·ªõc: {image.size[0]}x{image.size[1]}", width=300)
                
                # Image info metrics
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Width", f"{image.size[0]}px")
                with col2:
                    st.metric("Height", f"{image.size[1]}px")
                with col3:
                    st.metric("Mode", image.mode)
                with col4:
                    st.metric("Format", image.format or "Unknown")
                
            except Exception as e:
                st.error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {str(e)}")
                return
            
            # N√∫t d·ª± ƒëo√°n
            if st.button("üîç B·∫Øt ƒê·∫ßu Ch·∫©n ƒêo√°n", type="primary", use_container_width=True):
                
                # Progress tracking
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                try:
                    status_text.text("üì§ ƒêang t·∫£i ·∫£nh l√™n server...")
                    progress_bar.progress(25)
                    
                    # Reset file pointer
                    uploaded_file.seek(0)
                    
                    status_text.text("ü§ñ ƒêang ch·∫°y m√¥ h√¨nh AI...")
                    progress_bar.progress(50)
                    
                    # D·ª± ƒëo√°n
                    results = predict_image(uploaded_file, selected_model)
                    
                    progress_bar.progress(75)
                    status_text.text("üìä ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...")
                    
                    if results:
                        progress_bar.progress(100)
                        status_text.text("‚úÖ Ho√†n th√†nh!")
                        time.sleep(0.5)  # Pause ƒë·ªÉ user th·∫•y completion
                        
                        # Clear progress indicators
                        progress_bar.empty()
                        status_text.empty()
                        
                        st.success("üéâ Ph√¢n t√≠ch ho√†n t·∫•t!")
                        display_prediction_results(results, image)
                    else:
                        progress_bar.empty()
                        status_text.empty()
                        st.error("‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh d·ª± ƒëo√°n")
                        
                except Exception as e:
                    progress_bar.empty()
                    status_text.empty()
                    st.error(f"‚ùå L·ªói: {str(e)}")
    
    with tab2:
        st.header("üìã Th√¥ng Tin C√°c Lo·∫°i B·ªánh Da")
        
        disease_info = get_disease_info()
        if disease_info:
            display_disease_info(disease_info)
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b·ªánh")
    
    with tab3:
        st.header("üìä Demo v·ªõi Dataset Test")
        st.info("üöß T√≠nh nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo")
        
        # Hi·ªÉn th·ªã th·ªëng k√™ dataset
        st.subheader("üìà Th·ªëng K√™ Dataset Test")
        
        dataset_stats = {
            'akiec': 10, 'bcc': 10, 'bkl': 10, 'df': 7,
            'mel': 10, 'nv': 10, 'vasc': 11
        }
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì pie
            fig_pie = px.pie(
                values=list(dataset_stats.values()),
                names=list(dataset_stats.keys()),
                title="Ph√¢n B·ªë Dataset Test"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì bar
            fig_bar = px.bar(
                x=list(dataset_stats.keys()),
                y=list(dataset_stats.values()),
                title="S·ªë L∆∞·ª£ng ·∫¢nh Theo Lo·∫°i",
                labels={'x': 'Lo·∫°i b·ªánh', 'y': 'S·ªë l∆∞·ª£ng ·∫£nh'}
            )
            st.plotly_chart(fig_bar, use_container_width=True)

if __name__ == "__main__":
    main()
